{"version":3,"sources":["components/AuthFrom/components/AuthInput.js","utils/api/api.js","utils/configConst.js","utils/api/apifetcher/profile.js","containers/Auth/constants.js","containers/Auth/actions.js","utils/api/apifetcher/auth.js","utils/pathConst.js","components/Layout/Header/index.js","components/Layout/NavSideBar/index.js","components/Layout/index.js","components/AuthFrom/components/AuthLayout.js","components/AuthFrom/LoginForm.js","components/AuthFrom/constents.js","components/AuthFrom/RegisterFrom.js","components/Dashboard/index.js","App.js","containers/Tasks/constants.js","containers/Tasks/reducer.js","containers/Auth/reducer.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["AuthInput","props","className","type","name","onChange","value","placeholder","onBlur","onblur","alertMessage","axios","defaults","headers","post","api","instance","create","timeout","onUploadProgress","progressEvent","document","body","style","cursor","loaded","total","fire","a","options","request","apihost","red_alert","ProfileAPI","url","localStorage","getItem","method","profileId","AUTH_SUCCESS","AUTH_LOGOUT","authSuccess","data","dispatch","payload","username","sessionId","setItem","logout","removeItem","AuthAPI","query","email","LOGIN","REGISTER","DASHBOARD","withRouter","useDispatch","useSelector","state","AuthReducer","to","PATH","onClick","action","history","push","NavSideBar","useEffect","isLogined","actions","getMyProfile","then","res","Fragment","children","AuthLayout","title","linkTo","link","buttonEnable","handleSubmit","submitButtom","useState","setEmail","emailAlertMsg","setEmailAlertMsg","password","setPassword","passwordAlertMsg","setPasswordAlertMsg","handleInput","e","target","handleInputOnblur","inputList","login","sha256","rej","response","status","map","key","confirmPassword","setConfirmPassword","confirmPasswordAlertMsg","setUsername","usernameAlertMsg","setUsernameAlertMsg","checkEmailExist","verifyEmail","checkUsernameExist","verifyUsername","handleRegister","register","Dashboard","App","console","log","process","basename","path","component","LoginFrom","RegisterFrom","exact","FETCH_TASKS_SUCCESS","initialState","tasks","combineReducers","TasksReducer","concat","store","createStore","reducers","middlewares","ReduxThunk","ReduxPromise","compose","applyMiddleware","enhancer","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c320fddd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst AuthInput = props => {\r\n  return (\r\n    <div>\r\n      <input\r\n        className=\"auth_input w-full border-b-2\"\r\n        type={props.type}\r\n        name={props.name}\r\n        onChange={props.onChange}\r\n        value={props.value}\r\n        placeholder={props.placeholder}\r\n        onBlur={props.onblur}\r\n      />\r\n      <div className=\"auth_input_alert text-14 text-red-600\">\r\n        {props.alertMessage}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthInput;\r\n","import axios from \"axios\";\r\n\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\n\r\nconst api = {};\r\nexport const instance = axios.create({\r\n  timeout: 5000,\r\n  onUploadProgress: progressEvent => {\r\n    document.body.style.cursor =\r\n      progressEvent.loaded === progressEvent.total ? \"default\" : \"progress\";\r\n  }\r\n});\r\n\r\napi.fire = async options => {\r\n  return instance.request(options);\r\n};\r\n\r\nexport default api;\r\n","export const apihost = {\r\n  development: \"http://127.0.0.1:8080\",\r\n  production: \"https://its-api.herokuapp.com\"\r\n};\r\n\r\nexport const red_alert = {\r\n  LOGIN_EMAIL_NOT_EXIST:\r\n    \"We don't recognize this email, please sign up to get started\",\r\n  LOGIN_FAIL: \"Login fail. Please try again\",\r\n  REGISTER_FAIL: \"Register fail. Please try again\",\r\n\r\n  REGISTER_EMAIL_EXIST: \"This email address is already in use\",\r\n  REGISTER_USERNAME_EXIST: \"This username is already in use\"\r\n};\r\n","import api from \"../api\";\r\nimport { apihost } from \"../../configConst\";\r\n\r\nconst ProfileAPI = {};\r\n\r\nProfileAPI.getMyProfile = () => {\r\n  const url = `${\r\n    apihost[process.env.NODE_ENV]\r\n  }/profile/me?sessionId=${localStorage.getItem(\r\n    \"sessionId\"\r\n  )}&profileId=${localStorage.getItem(\"profileId\")}`;\r\n  return api.fire({\r\n    url,\r\n    method: \"GET\"\r\n  });\r\n};\r\n\r\nProfileAPI.getProfileById = profileId => {\r\n  const url = `${apihost[process.env.NODE_ENV]}/profile?profileId=${profileId}`;\r\n  return api.fire({\r\n    url,\r\n    method: \"GET\"\r\n  });\r\n};\r\n\r\nexport default ProfileAPI;\r\n","export const AUTH_SUCCESS = \"Auth/AUTH_SUCCESS\";\r\nexport const AUTH_LOGOUT = \"Auth/AUTH_LOGOUT\";\r\n","import { AUTH_SUCCESS, AUTH_LOGOUT } from \"./constants\";\r\n\r\nexport const authSuccess = data => dispatch => {\r\n  const payload = {\r\n    username: data.username\r\n  };\r\n  if (data.sessionId) localStorage.setItem(\"sessionId\", data.sessionId);\r\n  if (data.profileId === 0 || data.profileId)\r\n    localStorage.setItem(\"profileId\", data.profileId);\r\n  dispatch({ type: AUTH_SUCCESS, payload });\r\n};\r\n\r\nexport const logout = () => dispatch => {\r\n  localStorage.removeItem(\"sessionId\");\r\n  localStorage.removeItem(\"profileId\");\r\n  dispatch({ type: AUTH_LOGOUT });\r\n};\r\n","import api from \"../api\";\r\nimport { apihost } from \"../../configConst\";\r\n\r\nconst AuthAPI = {};\r\n\r\nAuthAPI.register = query => {\r\n  const url = `${apihost[process.env.NODE_ENV]}/session`;\r\n  return api.fire({\r\n    url,\r\n    method: \"POST\",\r\n    data: query\r\n  });\r\n};\r\n\r\nAuthAPI.login = query => {\r\n  const url = `${apihost[process.env.NODE_ENV]}/session/login`;\r\n  return api.fire({\r\n    url,\r\n    method: \"POST\",\r\n    data: query\r\n  });\r\n};\r\n\r\nAuthAPI.logout = () => {\r\n  const url = `${\r\n    apihost[process.env.NODE_ENV]\r\n  }/session/logout?sessionId=${localStorage.getItem(\"sessionId\")}`;\r\n  return api.fire({\r\n    url,\r\n    method: \"DELETE\"\r\n  });\r\n};\r\n\r\nAuthAPI.verifyEmail = email => {\r\n  const url = `${\r\n    apihost[process.env.NODE_ENV]\r\n  }/session/verify/email?email=${email}`;\r\n  return api.fire({\r\n    url,\r\n    method: \"GET\"\r\n  });\r\n};\r\n\r\nAuthAPI.verifyUsername = username => {\r\n  const url = `${\r\n    apihost[process.env.NODE_ENV]\r\n  }/session/verify/username?username=${username}`;\r\n  return api.fire({\r\n    url,\r\n    method: \"GET\"\r\n  });\r\n};\r\n\r\nexport default AuthAPI;\r\n","export const LOGIN = \"/login\";\r\nexport const REGISTER = \"/register\";\r\nexport const DASHBOARD = \"/dashboard\";\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport AuthAPI from \"../../../utils/api/apifetcher/auth\";\r\n\r\nimport * as action from \"../../../containers/Auth/actions\";\r\nimport * as PATH from \"../../../utils/pathConst\";\r\n\r\nimport \"./header.scss\";\r\n\r\nconst Header = props => {\r\n  const dispatch = useDispatch();\r\n  const { username } = useSelector(state => state.AuthReducer);\r\n\r\n  const handleLogout = () => {\r\n    AuthAPI.logout();\r\n    action.logout()(dispatch);\r\n    props.history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"header flex justify-between items-center bg-blue-300\">\r\n      <div className=\"text-28\">\r\n        <Link to={PATH.DASHBOARD}>ITS</Link>\r\n      </div>\r\n      <div className=\"header_link_container flex text-16\">\r\n        <div className=\"header_link\">{`Hi ${username}`}</div>\r\n        <div className=\"header_link cursor-pointer\" onClick={handleLogout}>\r\n          Logout\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Header);\r\n","import React from \"react\";\r\nimport {} from \"react-redux\";\r\nimport { Lin } from \"react-router-dom\";\r\nimport * as PATH from \"../../../utils/pathConst\";\r\n\r\nconst NavSideBar = props => {\r\n  return <div className=\"navSideBar bg-333\">asdasd</div>;\r\n};\r\n\r\nexport default NavSideBar;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport ProfileAPI from \"../../utils/api/apifetcher/profile\";\r\n\r\nimport * as actions from \"../../containers/Auth/actions\";\r\n\r\nimport Header from \"./Header\";\r\nimport NavSideBar from \"./NavSideBar\";\r\n\r\nconst Layout = props => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (props.isLogined) {\r\n      if (!localStorage.getItem(\"sessionId\")) {\r\n        actions.logout()(dispatch);\r\n        props.history.push(\"/login\");\r\n        return;\r\n      }\r\n      ProfileAPI.getMyProfile().then(\r\n        res => {\r\n          actions.authSuccess(res.data)(dispatch);\r\n        },\r\n        () => {\r\n          actions.logout()(dispatch);\r\n          props.history.push(\"/login\");\r\n          return;\r\n        }\r\n      );\r\n    } else {\r\n      if (localStorage.getItem(\"sessionId\")) {\r\n        props.history.push(\"/dashboard\");\r\n        return;\r\n      }\r\n    }\r\n  }, []);\r\n  return (\r\n    <div className=\"layout min-h-screen flex flex-col\">\r\n      {props.isLogined ? (\r\n        <React.Fragment>\r\n          <Header />\r\n          <div className=\"flex flex-grow\">\r\n            <NavSideBar />\r\n            {props.children}\r\n          </div>\r\n        </React.Fragment>\r\n      ) : (\r\n        props.children\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Layout);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Layout from \"../../Layout\";\r\n\r\nimport \"../auth.scss\";\r\n\r\nconst AuthLayout = props => {\r\n  return (\r\n    <Layout isLogined={false}>\r\n      <div className=\"auth_layout text-18 flex justify-center items-center w-full h-full min-h-screen bg-blue-400\">\r\n        <div className=\"auth_form mx-auto w-full bg-white rounded\">\r\n          <div className=\"auth_form_title text-blue-600 text-28 inline-block\">\r\n            {props.title}\r\n          </div>\r\n          {props.children}\r\n          <Link\r\n            className=\"auth_bottom_link text-blue-600 text-14 block\"\r\n            to={props.linkTo}\r\n          >\r\n            {props.link}\r\n          </Link>\r\n          <span\r\n            className={`main_btn btn-active btn-sm inline-block${\r\n              props.buttonEnable ? \"\" : \" disable\"\r\n            }`}\r\n            onClick={props.handleSubmit}\r\n          >\r\n            {props.submitButtom}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default AuthLayout;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport AuthInput from \"./components/AuthInput\";\r\nimport AuthLayout from \"./components/AuthLayout\";\r\n\r\nimport * as CONST from \"./constents\";\r\nimport { red_alert } from \"../../utils/configConst\";\r\nimport { REGISTER } from \"../../utils/pathConst\";\r\n\r\nimport AuthAPI from \"../../utils/api/apifetcher/auth\";\r\nimport * as actions from \"../../containers/Auth/actions\";\r\nimport sha256 from \"sha256\";\r\n\r\nconst LoginForm = props => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [emailAlertMsg, setEmailAlertMsg] = useState(\"\");\r\n\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordAlertMsg, setPasswordAlertMsg] = useState(\"\");\r\n\r\n  const handleInput = e => {\r\n    const { name } = e.target;\r\n    const { value } = e.target;\r\n    switch (name) {\r\n      case CONST.EMAIL:\r\n        setEmail(value);\r\n        break;\r\n      case CONST.PASSOWRD:\r\n        setPassword(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    AuthAPI.login({ email, password: sha256(password) }).then(\r\n      res => {\r\n        const { data } = res;\r\n        actions.authSuccess(data)(dispatch);\r\n        props.history.push(\"/dashboard\");\r\n      },\r\n      rej => {\r\n        const { status } = rej.response;\r\n        switch (status) {\r\n          case 401:\r\n            setPasswordAlertMsg(red_alert.LOGIN_FAIL);\r\n            setEmailAlertMsg(\"\");\r\n            break;\r\n          case 404:\r\n            setPasswordAlertMsg(\"\");\r\n            setEmailAlertMsg(red_alert.LOGIN_EMAIL_NOT_EXIST);\r\n            break;\r\n          default:\r\n            setPasswordAlertMsg(red_alert.LOGIN_FAIL);\r\n            setEmailAlertMsg(\"\");\r\n            break;\r\n        }\r\n      }\r\n    );\r\n  };\r\n  const handleInputOnblur = e => {};\r\n  const inputList = [\r\n    {\r\n      name: CONST.EMAIL,\r\n      type: \"text\",\r\n      value: email,\r\n      placeholder: CONST.EMAIL_PLACEHOLDER,\r\n      alertMessage: emailAlertMsg\r\n    },\r\n    {\r\n      name: CONST.PASSOWRD,\r\n      type: \"password\",\r\n      value: password,\r\n      placeholder: CONST.PASSWORD_PLACEHOLDER,\r\n      alertMessage: passwordAlertMsg\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <AuthLayout\r\n      title={CONST.LOGIN_TITLE}\r\n      link={CONST.REGISTER_LINK}\r\n      linkTo={REGISTER}\r\n      submitButtom={CONST.LOGIN_BUTTON}\r\n      handleSubmit={handleSubmit}\r\n      buttonEnable={email && password}\r\n    >\r\n      {inputList.map(e => (\r\n        <AuthInput\r\n          key={e.name}\r\n          name={e.name}\r\n          type={e.type}\r\n          onChange={handleInput}\r\n          value={e.value}\r\n          placeholder={e.placeholder}\r\n          alertMessage={e.alertMessage}\r\n          onblur={handleInputOnblur}\r\n        />\r\n      ))}\r\n    </AuthLayout>\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","export const LOGIN_TITLE = \"Login\";\r\nexport const REGISTER_TITLE = \"Register\";\r\n\r\nexport const LOGIN_BUTTON = \"Login\";\r\nexport const REGISTER_BUTTON = \"Register\";\r\n\r\nexport const EMAIL = \"email\";\r\nexport const PASSOWRD = \"password\";\r\nexport const CONFIRM_PASSOWRD = \"confirm_username\";\r\nexport const USERNAME = \"username\";\r\n\r\nexport const EMAIL_PLACEHOLDER = \"Email\";\r\nexport const PASSWORD_PLACEHOLDER = \"Password\";\r\nexport const CONFIRM_PASSOWRD_PLACEHOLDER = \"Confirm passowrd\";\r\nexport const USERNAME_PLACEHOLDER = \"Username\";\r\n\r\nexport const REGISTER_LINK = \"Don't have an account? Sign up now!\";\r\n\r\nexport const LOGIN_LINK = \"Already have an account? Log in now!\";\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport AuthInput from \"./components/AuthInput\";\r\nimport AuthLayout from \"./components/AuthLayout\";\r\n\r\nimport * as CONST from \"./constents\";\r\nimport { red_alert } from \"../../utils/configConst\";\r\nimport { LOGIN } from \"../../utils/pathConst\";\r\n\r\nimport AuthAPI from \"../../utils/api/apifetcher/auth\";\r\nimport * as actions from \"../../containers/Auth/actions\";\r\nimport sha256 from \"sha256\";\r\n\r\nconst RegisterForm = props => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [emailAlertMsg, setEmailAlertMsg] = useState(\"\");\r\n\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordAlertMsg, setPasswordAlertMsg] = useState(\"\");\r\n\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [confirmPasswordAlertMsg, setConfirmPasswordAlertMsg] = useState(\"\");\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [usernameAlertMsg, setUsernameAlertMsg] = useState(\"\");\r\n\r\n  const handleInput = e => {\r\n    const { name } = e.target;\r\n    const { value } = e.target;\r\n    switch (name) {\r\n      case CONST.EMAIL:\r\n        setEmail(value);\r\n        break;\r\n      case CONST.PASSOWRD:\r\n        setPassword(value);\r\n        break;\r\n      case CONST.CONFIRM_PASSOWRD:\r\n        setConfirmPassword(value);\r\n        break;\r\n      case CONST.USERNAME:\r\n        setUsername(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const checkEmailExist = () => {\r\n    if (!email) {\r\n      setEmailAlertMsg(\"\");\r\n      return false;\r\n    }\r\n    return AuthAPI.verifyEmail(email).then(\r\n      () => {\r\n        setEmailAlertMsg(red_alert.REGISTER_EMAIL_EXIST);\r\n        return false;\r\n      },\r\n      () => {\r\n        setEmailAlertMsg(\"\");\r\n        return true;\r\n      }\r\n    );\r\n  };\r\n\r\n  const checkUsernameExist = () => {\r\n    if (!username) {\r\n      setUsernameAlertMsg(\"\");\r\n      return false;\r\n    }\r\n    return AuthAPI.verifyUsername(username).then(\r\n      () => {\r\n        setUsernameAlertMsg(red_alert.REGISTER_USERNAME_EXIST);\r\n        return false;\r\n      },\r\n      () => {\r\n        setUsernameAlertMsg(\"\");\r\n        return true;\r\n      }\r\n    );\r\n  };\r\n\r\n  const handleSubmit = async e => {\r\n    if ((await checkEmailExist()) && (await checkUsernameExist())) {\r\n      handleRegister();\r\n    }\r\n  };\r\n\r\n  const handleRegister = () => {\r\n    AuthAPI.register({ email, password: sha256(password), username }).then(\r\n      res => {\r\n        const { data } = res;\r\n\r\n        actions.authSuccess(data)(dispatch);\r\n        props.history.push(\"/dashboard\");\r\n      },\r\n      rej => {\r\n        setUsernameAlertMsg(red_alert.REGISTER_FAIL);\r\n      }\r\n    );\r\n  };\r\n\r\n  const handleInputOnblur = async e => {\r\n    const { name } = e.target;\r\n    switch (name) {\r\n      case CONST.EMAIL:\r\n        checkEmailExist();\r\n        break;\r\n      case CONST.USERNAME:\r\n        checkUsernameExist();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const inputList = [\r\n    {\r\n      name: CONST.EMAIL,\r\n      type: \"text\",\r\n      value: email,\r\n      placeholder: CONST.EMAIL_PLACEHOLDER,\r\n      alertMessage: emailAlertMsg\r\n    },\r\n    {\r\n      name: CONST.PASSOWRD,\r\n      type: \"password\",\r\n      value: password,\r\n      placeholder: CONST.PASSWORD_PLACEHOLDER,\r\n      alertMessage: passwordAlertMsg\r\n    },\r\n    {\r\n      name: CONST.CONFIRM_PASSOWRD,\r\n      type: \"password\",\r\n      value: confirmPassword,\r\n      placeholder: CONST.CONFIRM_PASSOWRD_PLACEHOLDER,\r\n      alertMessage: confirmPasswordAlertMsg\r\n    },\r\n    {\r\n      name: CONST.USERNAME,\r\n      type: \"text\",\r\n      value: username,\r\n      placeholder: CONST.USERNAME_PLACEHOLDER,\r\n      alertMessage: usernameAlertMsg\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <AuthLayout\r\n      title={CONST.REGISTER_TITLE}\r\n      link={CONST.LOGIN_LINK}\r\n      linkTo={LOGIN}\r\n      submitButtom={CONST.REGISTER_BUTTON}\r\n      handleSubmit={handleSubmit}\r\n      buttonEnable={\r\n        email && password && password === confirmPassword && username\r\n      }\r\n    >\r\n      {inputList.map(e => (\r\n        <AuthInput\r\n          key={e.name}\r\n          name={e.name}\r\n          type={e.type}\r\n          onChange={handleInput}\r\n          value={e.value}\r\n          placeholder={e.placeholder}\r\n          alertMessage={e.alertMessage}\r\n          onblur={handleInputOnblur}\r\n        />\r\n      ))}\r\n    </AuthLayout>\r\n  );\r\n};\r\n\r\nexport default withRouter(RegisterForm);\r\n","import React, { useState } from \"react\";\r\n\r\nimport Layout from \"../Layout\";\r\n\r\nconst Dashboard = () => {\r\n  return <Layout isLogined={true}> \"LOGIN_SUCCESS\"</Layout>;\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\n\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport LoginFrom from \"./components/AuthFrom/LoginForm\";\nimport RegisterFrom from \"./components/AuthFrom/RegisterFrom\";\nimport Dashboard from \"./components/Dashboard\";\n\nimport * as PATH from \"./utils/pathConst\";\n\nimport \"./App.css\";\nfunction App() {\n  console.log(process.env);\n  return (\n    <div className=\"App\">\n      <Router basename=\"/\">\n        <Route path={PATH.LOGIN} component={LoginFrom} />\n        <Route path={PATH.REGISTER} component={RegisterFrom} />\n        <Route path={PATH.DASHBOARD} component={Dashboard} />\n        <Route path=\"/\" exact component={LoginFrom} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","export const FETCH_TASKS_SUCCESS = \"Tasks/FETCH_TASK_SUCCESS\";\r\n","import { FETCH_TASKS_SUCCESS } from \"./constants\";\r\n\r\nconst initialState = {\r\n  tasks: []\r\n};\r\n\r\nexport default function reducer(state = initialState, actions) {\r\n  const { type, payload } = actions;\r\n  switch (type) {\r\n    case FETCH_TASKS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        tasks: state.tasks.concat(payload)\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { AUTH_SUCCESS, AUTH_LOGOUT } from \"./constants\";\r\n\r\nconst initialState = {\r\n  username: \"\"\r\n};\r\n\r\nexport default function reducer(state = initialState, actions) {\r\n  const { type, payload } = actions;\r\n  switch (type) {\r\n    case AUTH_SUCCESS:\r\n      return {\r\n        ...state,\r\n        username: payload.username\r\n      };\r\n    case AUTH_LOGOUT:\r\n      return { ...state, ...initialState };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport TasksReducer from \"../containers/Tasks/reducer\";\r\nimport AuthReducer from \"../containers/Auth/reducer\";\r\n\r\nexport default combineReducers({ TasksReducer, AuthReducer });\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport ReduxPromise from \"redux-promise\";\r\nimport ReduxThunk from \"redux-thunk\";\r\n\r\nimport reducers from \"../reducers\";\r\n\r\n/**\r\n * Inject middle-ware to enhance redux store.\r\n */\r\nfunction enhancer() {\r\n  const middlewares = [ReduxThunk, ReduxPromise];\r\n  return compose(applyMiddleware(...middlewares));\r\n}\r\n\r\n/**\r\n * Define the global store to handle all application data\r\n *\r\n * In redux app, there should be only one store in whole application.\r\n */\r\nconst generateStore = () => {\r\n  const store = createStore(reducers, enhancer());\r\n  return store;\r\n};\r\n\r\nconst store = generateStore();\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}